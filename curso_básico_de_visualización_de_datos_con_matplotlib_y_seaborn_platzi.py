# -*- coding: utf-8 -*-
"""Curso Básico de visualización de datos con matplotlib y seaborn Platzi.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hLO2TRXMkMd5vOrwp_sGLE72bHGaid08

# Pyplot básico
"""

import matplotlib.pyplot as plt
import numpy as np

#guardamos en la varible x un array de numpy
x = np.linspace(0, 5, 11)

#guardamos en la varible y un array de numpy
y = x**2

y

plt.plot(x, y)
plt.show()

from matplotlib import markers
#comenzamos a realizar las modificaciones en esta gráfica 
plt.plot(x, y, color='r', linestyle='--', marker='D')
plt.show()

plt.hist(x)
plt.show

plt.pie(x)
plt.show

plt.scatter(x, y)
plt.show

plt.boxplot(x)
plt.show

"""# Subplot

Subplot permite crear gráficos dentro de una gráfica. Esto lo hace a través de una matriz de gráficos y se puede acceder a ellos a través de índices
"""

#creamos el set de datos
x = np.linspace(0,5,11)
y = x**2

"""Con subplot debemos pasarle 3 parámentros. El primero son las filas que queremos, el segundo las columnas que queremos y el tercero es el índice del gráfico que vamos a trabajar en ese momento. """

plt.subplot(1, 2, 1) #comenzamos trabajando con el índice 1 
plt.plot(x, y, 'r*')# modificamos el color del gráfico sin que nos afecte el otro gráfico
plt.plot(y, x, 'b:') #invertimos la relación y modificamos el mismo gráfico
plt.subplot(1, 2, 2) #continuamos con el índice 2 
plt.hist(x, color='m')
plt.show()

"""# Método orientado a objeto

Hay distintas maneras de hacer gráficas dentro de Matplotlib, ya vimos pyplot; sin embargo, es muy complicado personalizarla y entrar a ciertos parámetros.

Método orientado a objetos en Matplotlib
Un objeto define una figura, esa figura es un lienzo en el cual podemos introducir diferentes grá ficas(axes), de las cuales cada una posee sus propios ejes(axis).

La figura representa el todo, dentro de ella vamos a configurar gráficas las cuales contienen diferentes ejes.

Es un poco más complicado, pero en el mismo gráfico podemos personalizarlo mucho mejor.

Diferencias entre Pyplot y Object Oriented

Pyplot |	Object Oriented

Rápido |	Mayor personalización

Fácil |	Más código

Una sola figura |	Más amigable a múltiples diagramas
"""

x = np.linspace(0,5,11)
y = x**2

#graficamos con metodo orientado a objetos
fig = plt.figure()  #creamos una figura, es el lienzo donde vamos a dejar nuestras graficas y lo guardamos en una variable
axes = fig.add_axes([0.1, 0.1, 0.5, 0.9]) #las graficas se van a llamar axes y le agregamos un axes
                                          #los dos primeros parámentros hacen referencia a la posición en la figura o en el lienzo 
                                          #los otros dos hacen referencia al tamaño que va a tener esa figura 
axes.plot(x,y, 'b')
fig.show()

#ejemplo superponiendose
fig = plt.figure() 
axes = fig.add_axes([0.1, 0.1, 0.8, 0.9]) 
axes2 = fig.add_axes([0.1, 0.1, 0.4, 0.3])

axes.plot(x,y, 'b')
axes2.plot(y, x, 'r')
fig.show()

#cambiando la posición vemos que se logra correr un poco la figura 2
fig = plt.figure() 
axes = fig.add_axes([0.1, 0.1, 0.8, 0.9]) 
axes2 = fig.add_axes([0.3, 0.3, 0.4, 0.3])

axes.plot(x,y, 'b')
axes2.plot(y, x, 'r')
fig.show()

#lo ponemos correctamente para que figuren las dos graficas
fig = plt.figure() 
axes = fig.add_axes([1, 0.1, 1, 1]) 
axes2 = fig.add_axes([2, 0.1, 1, 1])

axes.plot(x,y, 'b')
axes2.plot(y, x, 'r')
axes.set_title('primer grafico')
axes2.set_title('segundo grafico')
axes.set_facecolor('gray')
fig.show()

"""# Subplots"""

x = np.linspace(0, 5, 11)

y = np.sin(x)

#graficamos usando subplots
fig, ax = plt.subplots()
ax.plot(x, y, 'b')
fig.show()

fig, ax = plt.subplots(nrows=1, ncols=2) #establecemos que queremos una fila y dos columnas
ax[0].plot(x, y, 'b') #podemos acceder a cada ax a traves de su índice como un array 
ax[1].plot(y, x, 'r')
fig.show()

fig, (ax1, ax2) = plt.subplots(nrows=1, ncols=2) # creamos los subplots como una tupla y accedemos a ellos como una tupla
ax1.plot(x, y, 'b') 
ax1.set_title('primer plot')
ax2.plot(y, x, 'r')
fig.show()

fig, ax = plt.subplots(nrows=2, ncols=4)
ax[0,0].plot(x,np.cos(x))
ax[0,1].plot(x,np.sin(x),'r')
ax[0,2].plot(x,np.tan(x), 'y')
ax[0,3].plot(x,np.cos(x)**2)

fig, ((ax1,ax2,ax3,ax4), (ax5,ax6,ax7,ax8)) = plt.subplots(nrows=2, ncols=4)
ax1.plot(x,np.cos(x))
ax3.plot(x,np.sin(x),'r')
ax5.plot(x,np.tan(x), 'y')
ax7.plot(x,np.cos(x)**2)
fig.tight_layout() #hacer que la figura se vea más acomodada

"""Reto : Graficar y completar todos los ax de la figura de distinta forma. """

fig, ((ax1,ax2,ax3,ax4), (ax5,ax6,ax7,ax8)) = plt.subplots(nrows=2, ncols=4)
ax1.plot(x,np.cos(x), 'lime', marker='P')
ax2.plot(x,np.sin(x),'r', marker='>')
ax3.plot(x,np.tan(x), 'y', ls='-.')
ax4.plot(x,np.cos(x)**2, 'chocolate', marker='D')
ax5.plot(x**2, y, 'aqua')
ax6.plot(x**3,y, 'magenta', marker='.')
ax7.plot((x*(-x)), 'darkgray', marker='*', ls=':')
ax8.plot(x, y,'peru')
fig.tight_layout()

"""# Leyendas, etiquetas, titulos, tamaño"""

fig, ax = plt.subplots(nrows=1,ncols=2, figsize=(10,5))
ax[0].plot(x,y, label='sen(x)') #defino los labels cuando creamos la grafica
ax[0].set_title('Relacion X - Y')
ax[0].set_xlabel('X')
ax[0].set_ylabel('Y')
ax[0].legend() #aca permitimos que aparezcan esos labels

ax[1].plot(y,x)
ax[1].set_title('Relacion Y - X')
ax[1].set_xlabel('Y')
ax[1].set_ylabel('X')
fig.show()

"""Sin el método orientado a objetos"""

plt.plot()